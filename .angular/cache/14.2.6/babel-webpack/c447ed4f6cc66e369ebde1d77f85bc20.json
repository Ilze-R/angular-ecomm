{"ast":null,"code":"/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nvar ObliviousSet =\n/** @class */\nfunction () {\n  function ObliviousSet(ttl) {\n    this.ttl = ttl;\n    this.map = new Map();\n    /**\n     * Creating calls to setTimeout() is expensive,\n     * so we only do that if there is not timeout already open.\n     */\n\n    this._to = false;\n  }\n\n  ObliviousSet.prototype.has = function (value) {\n    return this.map.has(value);\n  };\n\n  ObliviousSet.prototype.add = function (value) {\n    var _this = this;\n\n    this.map.set(value, now());\n    /**\n     * When a new value is added,\n     * start the cleanup at the next tick\n     * to not block the cpu for more important stuff\n     * that might happen.\n     */\n\n    if (!this._to) {\n      this._to = true;\n      setTimeout(function () {\n        _this._to = false;\n        removeTooOldValues(_this);\n      }, 0);\n    }\n  };\n\n  ObliviousSet.prototype.clear = function () {\n    this.map.clear();\n  };\n\n  return ObliviousSet;\n}();\n\nexport { ObliviousSet };\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\n\nexport function removeTooOldValues(obliviousSet) {\n  var olderThen = now() - obliviousSet.ttl;\n  var iterator = obliviousSet.map[Symbol.iterator]();\n  /**\n   * Because we can assume the new values are added at the bottom,\n   * we start from the top and stop as soon as we reach a non-too-old value.\n   */\n\n  while (true) {\n    var next = iterator.next().value;\n\n    if (!next) {\n      return; // no more elements\n    }\n\n    var value = next[0];\n    var time = next[1];\n\n    if (time < olderThen) {\n      obliviousSet.map.delete(value);\n    } else {\n      // We reached a value that is not old enough\n      return;\n    }\n  }\n}\nexport function now() {\n  return new Date().getTime();\n}","map":{"version":3,"sources":["/Users/i/Desktop/angular/ang-full-ecom/03-frontend/angular-ecommerce/node_modules/oblivious-set/dist/es/index.js"],"names":["ObliviousSet","ttl","map","Map","_to","prototype","has","value","add","_this","set","now","setTimeout","removeTooOldValues","clear","obliviousSet","olderThen","iterator","Symbol","next","time","delete","Date","getTime"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAY;AAAG;AAAe,YAAY;AAC1C,WAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;AACA;AACR;AACA;AACA;;AACQ,SAAKC,GAAL,GAAW,KAAX;AACH;;AACDJ,EAAAA,YAAY,CAACK,SAAb,CAAuBC,GAAvB,GAA6B,UAAUC,KAAV,EAAiB;AAC1C,WAAO,KAAKL,GAAL,CAASI,GAAT,CAAaC,KAAb,CAAP;AACH,GAFD;;AAGAP,EAAAA,YAAY,CAACK,SAAb,CAAuBG,GAAvB,GAA6B,UAAUD,KAAV,EAAiB;AAC1C,QAAIE,KAAK,GAAG,IAAZ;;AACA,SAAKP,GAAL,CAASQ,GAAT,CAAaH,KAAb,EAAoBI,GAAG,EAAvB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,QAAI,CAAC,KAAKP,GAAV,EAAe;AACX,WAAKA,GAAL,GAAW,IAAX;AACAQ,MAAAA,UAAU,CAAC,YAAY;AACnBH,QAAAA,KAAK,CAACL,GAAN,GAAY,KAAZ;AACAS,QAAAA,kBAAkB,CAACJ,KAAD,CAAlB;AACH,OAHS,EAGP,CAHO,CAAV;AAIH;AACJ,GAhBD;;AAiBAT,EAAAA,YAAY,CAACK,SAAb,CAAuBS,KAAvB,GAA+B,YAAY;AACvC,SAAKZ,GAAL,CAASY,KAAT;AACH,GAFD;;AAGA,SAAOd,YAAP;AACH,CAlCiC,EAAlC;;AAmCA,SAASA,YAAT;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,kBAAT,CAA4BE,YAA5B,EAA0C;AAC7C,MAAIC,SAAS,GAAGL,GAAG,KAAKI,YAAY,CAACd,GAArC;AACA,MAAIgB,QAAQ,GAAGF,YAAY,CAACb,GAAb,CAAiBgB,MAAM,CAACD,QAAxB,GAAf;AACA;AACJ;AACA;AACA;;AACI,SAAO,IAAP,EAAa;AACT,QAAIE,IAAI,GAAGF,QAAQ,CAACE,IAAT,GAAgBZ,KAA3B;;AACA,QAAI,CAACY,IAAL,EAAW;AACP,aADO,CACC;AACX;;AACD,QAAIZ,KAAK,GAAGY,IAAI,CAAC,CAAD,CAAhB;AACA,QAAIC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAf;;AACA,QAAIC,IAAI,GAAGJ,SAAX,EAAsB;AAClBD,MAAAA,YAAY,CAACb,GAAb,CAAiBmB,MAAjB,CAAwBd,KAAxB;AACH,KAFD,MAGK;AACD;AACA;AACH;AACJ;AACJ;AACD,OAAO,SAASI,GAAT,GAAe;AAClB,SAAO,IAAIW,IAAJ,GAAWC,OAAX,EAAP;AACH","sourcesContent":["/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nvar ObliviousSet = /** @class */ (function () {\n    function ObliviousSet(ttl) {\n        this.ttl = ttl;\n        this.map = new Map();\n        /**\n         * Creating calls to setTimeout() is expensive,\n         * so we only do that if there is not timeout already open.\n         */\n        this._to = false;\n    }\n    ObliviousSet.prototype.has = function (value) {\n        return this.map.has(value);\n    };\n    ObliviousSet.prototype.add = function (value) {\n        var _this = this;\n        this.map.set(value, now());\n        /**\n         * When a new value is added,\n         * start the cleanup at the next tick\n         * to not block the cpu for more important stuff\n         * that might happen.\n         */\n        if (!this._to) {\n            this._to = true;\n            setTimeout(function () {\n                _this._to = false;\n                removeTooOldValues(_this);\n            }, 0);\n        }\n    };\n    ObliviousSet.prototype.clear = function () {\n        this.map.clear();\n    };\n    return ObliviousSet;\n}());\nexport { ObliviousSet };\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\nexport function removeTooOldValues(obliviousSet) {\n    var olderThen = now() - obliviousSet.ttl;\n    var iterator = obliviousSet.map[Symbol.iterator]();\n    /**\n     * Because we can assume the new values are added at the bottom,\n     * we start from the top and stop as soon as we reach a non-too-old value.\n     */\n    while (true) {\n        var next = iterator.next().value;\n        if (!next) {\n            return; // no more elements\n        }\n        var value = next[0];\n        var time = next[1];\n        if (time < olderThen) {\n            obliviousSet.map.delete(value);\n        }\n        else {\n            // We reached a value that is not old enough\n            return;\n        }\n    }\n}\nexport function now() {\n    return new Date().getTime();\n}\n"]},"metadata":{},"sourceType":"module"}